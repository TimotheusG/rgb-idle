{"version":3,"sources":["components/name_display.js","components/name_field.js","models/color-part.ts","models/color.ts","components/game.js","App.js","serviceWorker.js","index.js"],"names":["NameDisplay","name","NameField","type","onChange","event","props","handleChange","target","value","Component","ColorPart","hex","Hex","this","toString","Color","red","green","blue","Red","Green","Blue","rgbToHex","r","g","b","map","x","length","join","Game","state","colors","param","setState","a","Math","floor","random","c","col","previousState","getColorString","onClick","handleClick","color","disabled","style","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAQeA,EANK,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACpB,OACE,sCAAYA,ICSDC,E,iLAVJ,IAAD,OACN,OACE,6BACE,2BAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAS,EAAKC,MAAMC,aAAaF,EAAMG,OAAOC,e,GAJ3DC,aCWTC,E,WAVX,WAAYC,GACX,yBAFDC,SAEA,EACIC,KAAKD,IAAMD,E,wDAIX,OAAOE,KAAKD,IAAIE,e,KCiBTC,E,WAnBX,WAAYC,EAAaC,EAAeC,GACvC,yBALDC,SAKA,OAJAC,WAIA,OAHAC,UAGA,OAWAC,SAAW,SAACC,EAAUC,EAAUC,GAArB,MAAkC,IAAM,CAACF,EAAGC,EAAGC,GAAGC,KAAI,SAAAC,GAC7D,IAAMhB,EAAMgB,EAAEb,SAAS,IACvB,OAAsB,IAAfH,EAAIiB,OAAe,IAAMjB,EAAMA,KACrCkB,KAAK,KAbNhB,KAAKM,IAAM,IAAIT,EAAUM,GACzBH,KAAKO,MAAQ,IAAIV,EAAUO,GAC3BJ,KAAKQ,KAAO,IAAIX,EAAUQ,G,6DAK1B,OAAOL,KAAKS,SAAST,KAAKM,IAAIP,IAAKC,KAAKO,MAAMR,IAAKC,KAAKQ,KAAKT,S,KCwBtDkB,E,YAjCb,WAAYzB,GAAO,IAAD,8BAChB,4CAAMA,KAED0B,MAAQ,CAAC/B,KAAM,MAAOgC,OAAQ,CAAC,UAAW,UAAW,YAH1C,E,0EAKLC,GACXpB,KAAKqB,SAAS,CAAClC,KAAMiC,M,oCAIrB,IAAIE,EAAIC,KAAKC,MAAuB,IAAhBD,KAAKE,UACrBb,EAAIW,KAAKC,MAAuB,IAAhBD,KAAKE,UACrBC,EAAIH,KAAKC,MAAuB,IAAhBD,KAAKE,UACrBE,EAAM,IAAIzB,EAAMoB,EAAEV,EAAEc,GACxB1B,KAAKqB,UAAS,SAAAO,GAAa,MACvB,CAACT,OAAO,GAAD,mBAAMS,EAAcT,QAApB,CAA4BQ,EAAIE,yB,+BAInC,IAAD,OAEP,OACE,6BACI,4BAAQC,QAAU,SAACvC,GAAD,OAAW,EAAKwC,YAAYxC,KAA9C,iBACF,kBAAC,EAAD,CAAaJ,KAAMa,KAAKkB,MAAM/B,OAC9B,kBAAC,EAAD,CAAWA,KAAMa,KAAKkB,MAAM/B,KAAMM,aAAc,SAACF,GAAD,OAAW,EAAKE,aAAaF,MAChFS,KAAKkB,MAAMC,OAAON,KAAI,SAAAmB,GAAK,OAAI,4BAAQC,UAAQ,EAACC,MAAO,CAACC,gBAAiBH,IAASA,W,GA3BpEpC,aCOJwC,E,iLANX,OACE,kBAAC,EAAD,U,GALYxC,aCSEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.54f7527f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NameDisplay = ({name}) => {\r\n  return(\r\n    <div>Name: {name}</div>\r\n  )\r\n}\r\n\r\nexport default NameDisplay;","import React, { Component } from 'react';\r\n\r\nclass NameField extends Component {\r\n  render(){\r\n    return(\r\n      <div>\r\n        <input type='text' onChange={(event)=>this.props.handleChange(event.target.value) }></input>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n};\r\n\r\nexport default NameField;","\r\nclass ColorPart {\r\n    Hex: number;\r\n    constructor(hex: number)\r\n    {\r\n        this.Hex = hex;\r\n    }\r\n    getString() : string\r\n    {\r\n        return this.Hex.toString();\r\n    }\r\n}\r\n\r\nexport default ColorPart;","import ColorPart from './color-part';\r\nclass Color\r\n{\r\n    Red: ColorPart;\r\n    Green: ColorPart;\r\n    Blue: ColorPart;\r\n\r\n    constructor(red: number, green: number, blue: number)\r\n    {\r\n        this.Red = new ColorPart(red);\r\n        this.Green = new ColorPart(green);\r\n        this.Blue = new ColorPart(blue);\r\n    }\r\n\r\n    getColorString()\r\n    {\r\n        return this.rgbToHex(this.Red.Hex, this.Green.Hex, this.Blue.Hex);\r\n    }\r\n\r\n    rgbToHex = (r:number, g:number, b:number) => '#' + [r, g, b].map(x => {\r\n        const hex = x.toString(16)\r\n        return hex.length === 1 ? '0' + hex : hex\r\n      }).join('')\r\n\r\n\r\n}\r\nexport default Color;","import React, { Component } from 'react';\r\nimport NameDisplay from './name_display';\r\nimport NameField from './name_field';\r\nimport Color from '../models/color'\r\n\r\n\r\nclass Game extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {name: 'abc', colors: ['#ff0000', '#00ff00', '#0000ff']};\r\n  }\r\n  handleChange(param) {\r\n    this.setState({name: param});\r\n  }\r\n\r\n  handleClick() {\r\n    var a = Math.floor( Math.random() * 255);\r\n    var b = Math.floor( Math.random() * 255);\r\n    var c = Math.floor( Math.random() * 255);\r\n    var col = new Color(a,b,c);\r\n    this.setState(previousState => (\r\n        {colors: [...previousState.colors, col.getColorString()]}\r\n    )); \r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n          <button onClick= {(event) => this.handleClick(event)}>Add New Color</button>\r\n        <NameDisplay name={this.state.name} />        \r\n        <NameField name={this.state.name} handleChange={(event) => this.handleChange(event)}/>\r\n    {this.state.colors.map(color => <button disabled style={{backgroundColor: color}}>{color}</button>)}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './components/game'\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <Game></Game>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}