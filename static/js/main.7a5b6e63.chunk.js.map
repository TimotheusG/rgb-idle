{"version":3,"sources":["components/welcome.js","models/color-part.ts","models/color.ts","components/display.js","components/score.js","components/color-container.js","components/pixel-container.js","components/game.js","components/tier-container.js","components/game-container.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","class","onClick","ColorPart","hex","Hex","this","toString","Color","red","green","blue","Red","Green","Blue","rgbToHex","r","g","b","map","x","length","join","Display","text","value","Score","to_next_pixel","pixels","colors_length","ColorContainer","id","disabled","color_cost","addColor","colors","color","style","backgroundColor","PixelContainer","handlePieceClick","role","aria-valuenow","aria-valuemin","aria-valuemax","width","height","Game","a","Math","floor","random","c","col","state","setState","previousState","getColorString","pixel_speed","checkToPixels","handleUpgrade","upgradeTier","isUpgraded","default","myInterval","setInterval","once_a_second","param","name","isGreater","Component","TierContainer","colorsCount","newTier","tiers","newPixels","Tabs","defaultActiveKey","tier","Tab","eventKey","title","GameContainer","selectedIndex","handleSelect","index","handleButtonClick","activeKey","onSelect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a5b6e63.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Welcome = (props) => {\r\n  return(\r\n      <div class='container'>\r\n    <div class=\"row h1\">Welcome To the Game!</div>\r\n    <div class='row p'>This is a game where you earn Pixels, to purchase new Colors.</div>\r\n    <div class='row p'>The Colors you are given are randomized.</div>\r\n    <div class='row p'>To learn more, just start playing!</div>\r\n    <div class='row'>\r\n    <button onClick={props.onClick} class='btn btn-primary'>Start Game</button>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Welcome;","\r\nclass ColorPart {\r\n    Hex: number;\r\n    constructor(hex: number)\r\n    {\r\n        this.Hex = hex;\r\n    }\r\n    getString() : string\r\n    {\r\n        return this.Hex.toString();\r\n    }\r\n}\r\n\r\nexport default ColorPart;","import ColorPart from './color-part';\r\nclass Color\r\n{\r\n    Red: ColorPart;\r\n    Green: ColorPart;\r\n    Blue: ColorPart;\r\n\r\n    constructor(red: number, green: number, blue: number)\r\n    {\r\n        this.Red = new ColorPart(red);\r\n        this.Green = new ColorPart(green);\r\n        this.Blue = new ColorPart(blue);\r\n    }\r\n\r\n    getColorString()\r\n    {\r\n        return this.rgbToHex(this.Red.Hex, this.Green.Hex, this.Blue.Hex);\r\n    }\r\n\r\n    rgbToHex = (r:number, g:number, b:number) => '#' + [r, g, b].map(x => {\r\n        const hex = x.toString(16)\r\n        return hex.length === 1 ? '0' + hex : hex\r\n      }).join('')\r\n\r\n\r\n}\r\nexport default Color;","import React from 'react';\r\n\r\nconst Display = ({text,value}) => {\r\n  return(\r\n    <div class=\"h3\">{text}: {value}</div>\r\n  )\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport Display from './display'\r\n\r\nconst Score = ({ to_next_pixel, pixels, colors_length}) => {\r\n  return(\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n          <Display text=\"To Next Pixel\" value={to_next_pixel}></Display>\r\n          </div>\r\n          <div class=\"col\">\r\n          <Display text=\"Pixels\" value={pixels}></Display>\r\n          </div>\r\n          <div class=\"col\"> \r\n          <Display text=\"Colors\" value={colors_length}></Display>\r\n          </div>\r\n          </div>\r\n  )\r\n}\r\n\r\nexport default Score;\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst ColorContainer = (props) => {\r\n    return (\r\n            <div class=\"col\">\r\n          <div class=\"row\">\r\n        <button id=\"color-btn\" class=\"btn btn-primary btn-block\" disabled={props.pixels < props.color_cost} onClick= {props.addColor}>Add New Color (Cost: {props.color_cost} Pixels)</button>\r\n        </div>\r\n        <div class=\"row\">\r\n    {props.colors.map(color => <button class=\"btn btn-color\" style={{backgroundColor: color}}>{color}</button>)}\r\n    </div>\r\n    </div>\r\n    );\r\n  \r\n    }\r\n\r\nexport default ColorContainer;","import React from 'react';\r\n\r\nconst PixelContainer = (props) => {\r\n    return (\r\n        <div class=\"col\">        \r\n        <button class=\"btn btn-primary btn-block\" onClick= {props.handlePieceClick}>Get Pixel Piece</button>\r\n        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow={props.to_next_pixel} aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width: props.to_next_pixel+'%', height:'30px'}}></div>              \r\n      </div>        \r\n    );  \r\n    }\r\n\r\nexport default PixelContainer;","import React, { Component } from 'react';\r\nimport Color from '../models/color';\r\nimport Score from './score';\r\nimport ColorContainer from './color-container'\r\nimport PixelContainer from './pixel-container'\r\n\r\n\r\nclass Game extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    if(props.default)\r\n    {\r\n      this.state = {colors: [], pixels: 100, to_next_pixel: 0, pixel_speed: 5, color_cost: 2, isUpgraded: false, upgradeTier: props.upgradeTier};\r\n    }\r\n    else\r\n    {\r\n      this.state = {colors: [], pixels: props.pixels, to_next_pixel: 0, pixel_speed: 5, color_cost: 2, isUpgraded: false, upgradeTier: props.upgradeTier};\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myInterval = setInterval(() => {\r\n      this.once_a_second();\r\n    }, 1000)\r\n  }\r\n\r\n  once_a_second()\r\n  {\r\n    const { to_next_pixel, pixel_speed } = this.state;\r\n    this.setState(() => ({\r\n      to_next_pixel: (to_next_pixel + pixel_speed)\r\n    }));\r\n    this.checkToPixels();\r\n  }\r\n\r\n  checkToPixels() {\r\n    const { pixels, to_next_pixel } = this.state;\r\n    if(to_next_pixel >= 100)\r\n    {\r\n      this.setState(() => ({\r\n        to_next_pixel: to_next_pixel - 100,\r\n        pixels: pixels + 1\r\n      }));\r\n    }\r\n  }\r\n\r\n  handleChange(param) {\r\n    this.setState({name: param});\r\n  }\r\n\r\n  addColor = () => {\r\n    var a = Math.floor( Math.random() * 255);\r\n    var b = Math.floor( Math.random() * 255);\r\n    var c = Math.floor( Math.random() * 255);\r\n    var col = new Color(a,b,c);\r\n    const { color_cost, pixels } = this.state;\r\n    if(pixels >= color_cost)\r\n    {      \r\n      this.setState(previousState => (\r\n        {colors: [...previousState.colors, col.getColorString()], \r\n          pixels: pixels - color_cost, color_cost: color_cost + 1}\r\n    )); \r\n    }\r\n    \r\n  }\r\n\r\n  handlePieceClick = () => {\r\n    const { to_next_pixel, pixel_speed} = this.state;\r\n    this.setState(() => ({\r\n      to_next_pixel: (to_next_pixel + pixel_speed)\r\n    }));\r\n    this.checkToPixels();\r\n  }\r\n\r\n  handleUpgrade = () => {\r\n    this.state.upgradeTier(this.state.colors.length);\r\n    this.setState(\r\n      {isUpgraded: true}\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    const isGreater = (this.state.colors.length > 5 && !this.state.isUpgraded);\r\n\r\n    return (\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n        </div>\r\n        <Score to_next_pixel={this.state.to_next_pixel} pixels={this.state.pixels} colors_length={this.state.colors.length}></Score>\r\n        <div class=\"row\">      \r\n              <PixelContainer to_next_pixel={this.state.to_next_pixel} handlePieceClick={this.handlePieceClick}></PixelContainer>\r\n  <ColorContainer addColor={this.addColor} pixels={this.state.pixels} color_cost={this.state.color_cost} colors={this.state.colors}></ColorContainer>\r\n  {isGreater ? (<button onClick={this.handleUpgrade} class=\"btn btn-secondary\">Upgrade Tier</button>) : (<div></div>) }\r\n    </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\nimport Game from './game'\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\n\r\nclass TierContainer extends Component {   \r\n    constructor(props){\r\n        super(props);\r\n    \r\n        this.state = {tiers:[1], newPixels: 0};\r\n      } \r\n    state = {\r\n      };\r\n\r\n      upgradeTier = (colorsCount) => {\r\n        var highestTier = this.state.tiers[this.state.tiers.length-1];\r\n        var newTier = highestTier + 1;\r\n        this.setState(previousState => ({ tiers: [...previousState.tiers, newTier], newPixels: colorsCount}));\r\n      };\r\n    \r\n  render() {\r\n    return (\r\n        <Tabs defaultActiveKey='1'>\r\n        {this.state.tiers.map(tier=>\r\n        <Tab eventKey={tier} title={\"Tier \" + tier}>\r\n          {tier == 1 ?\r\n          <Game upgradeTier={this.upgradeTier} default={true}></Game>\r\n          :\r\n          <Game upgradeTier={this.upgradeTier} default={false} pixels={this.state.newPixels}></Game>\r\n  }\r\n          </Tab>\r\n          )}        \r\n        </Tabs>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TierContainer;","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Welcome from './welcome'\r\nimport TierContainer from './tier-container'\r\n\r\nclass GameContainer extends Component {    \r\n    state = {\r\n        selectedIndex: \"welcome\"\r\n      };\r\n    \r\n      handleSelect = index => {\r\n        this.setState({ selectedIndex: index });\r\n      };\r\n    \r\n      handleButtonClick = () => {\r\n        this.setState({ selectedIndex: \"game\" });\r\n      };\r\n\r\n  render() {\r\n    return (\r\n      <Tabs activeKey={this.state.selectedIndex} onSelect={this.handleSelect} defaultActiveKey='welcome'>\r\n        <Tab eventKey=\"welcome\">\r\n        <Welcome onClick={this.handleButtonClick}></Welcome>\r\n      </Tab>\r\n      <Tab eventKey=\"game\" title=\"RBG\">   \r\n      <TierContainer></TierContainer>\r\n      </Tab>      \r\n        <Tab eventKey=\"settings\" title=\"settings\">\r\n            <div>More to come here</div>\r\n        </Tab>        \r\n      </Tabs>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameContainer;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport GameContainer from './components/game-container'\n\nclass App extends Component {\n  render() {\n    return (\n      <GameContainer></GameContainer>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}